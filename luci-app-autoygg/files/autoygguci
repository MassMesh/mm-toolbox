#!/usr/bin/env lua

dkjson = require("dkjson")
uci	= require("uci")

UCI = {}

--- Return the configuration defaults as a table suitable for JSON output
--
-- Mostly taken from autoygg-client --dumpConfig
-- @return table with configuration defaults
function UCI.defaults()
	return {
		action = "register",
		adddefaultgatewaycommand = "ip ro add default via %%ClientGateway%%",
		addpeernullroutecommand = "ip ro replace blackhole %%Peer%% metric 500",
		addpeerroutecommand = "ip ro add %%Peer%% via %%DefaultGatewayIP%% dev %%DefaultGatewayDevice%%",
		addpeerroutelistcommand = "ip ro list %%Peer%% via %%DefaultGatewayIP%% dev %%DefaultGatewayDevice%%",
		addtunnelroutecommand = "ip addr add %%IPAddress%%/%%NetMask%% dev %%YggdrasilInterface%%",
		daemon = false,
		debug = false,
		defaultgatewaydev = "",
		defaultgatewayip = "",
		deldefaultgatewaycommand = "ip ro del default via %%ClientGateway%%",
		delpeernullroutecommand = "ip ro del blackhole %%Peer%% metric 500",
		delpeerroutecommand = "ip ro del %%Peer%%",
		delpeerroutelistcommand = "ip ro list %%Peer%%",
		deltunnelroutecommand = "ip addr del %%IPAddress%%/%%NetMask%% dev %%YggdrasilInterface%%",
		gatewayaddremotesubnetcommand = "yggdrasilctl addremotesubnet subnet=%%Subnet%% box_pub_key=%%ClientPublicKey%%",
		gatewaydelremotesubnetcommand = "yggdrasilctl removeremotesubnet subnet=%%Subnet%% box_pub_key=%%ClientPublicKey%%",
		gatewayhost = "",
		gatewayport = "8080",
		listtunnelroutecommand = "ip addr list %%YggdrasilInterface%%",
		quiet = false,
		shell = "/bin/sh",
		shellcommandarg = "-c",
		yggdrasilinterface = "ygg0"
	}
end

--- Return the autoygg configuration as a table suitable for JSON output
--
-- @return table with autoygg configuration
function UCI.get()
	local obj = UCI.defaults()

	local cursor = uci.cursor()
	local config = cursor:get_all("autoygg", "autoygg")
	if not config then return obj end

	obj.action = config.action
	obj.adddefaultgatewaycommand = config.adddefaultgatewaycommand
	obj.addpeernullroutecommand = config.addpeernullroutecommand
	obj.addpeerroutecommand = config.addpeerroutecommand
	obj.addpeerroutelistcommand = config.addpeerroutelistcommand
	obj.addtunnelroutecommand = config.addtunnelroutecommand
	obj.daemon = to_bool(config.daemon)
	obj.debug = to_bool(config.debug)
	obj.defaultgatewaydev = config.defaultgatewaydev
	obj.defaultgatewayip = config.defaultgatewayip
	obj.deldefaultgatewaycommand = config.deldefaultgatewaycommand
	obj.delpeernullroutecommand = config.delpeernullroutecommand
	obj.delpeerroutecommand = config.delpeerroutecommand
	obj.delpeerroutelistcommand = config.delpeerroutelistcommand
	obj.deltunnelroutecommand = config.deltunnelroutecommand
	obj.gatewayaddremotesubnetcommand = config.gatewayaddremotesubnetcommand
	obj.gatewaydelremotesubnetcommand = config.gatewaydelremotesubnetcommand
	obj.gatewayhost = config.gatewayhost
	obj.gatewayport = config.gatewayport
	obj.listtunnelroutecommand = config.listtunnelroutecommand
	obj.quiet = to_bool(config.quiet)
	obj.shell = config.shell
	obj.shellcommandarg = config.shellcommandarg
	obj.yggdrasilinterface = config.yggdrasilinterface

	return obj
end

--- Parse and save updated configuration from JSON input
--
-- Transforms general settings into UCI sections, and replaces the UCI config's
-- contents with them.
-- @param table JSON input
-- @return Boolean whether saving succeeded
function UCI.set(obj)
	local cursor = uci.cursor()

	if cursor:get_all("autoygg") ~= nil then
		for i, section in pairs(cursor:get_all("autoygg")) do
			cursor:delete("autoygg", section[".name"])
		end
	end


	cursor:set("autoygg", "autoygg", "autoygg")
	cursor:set("autoygg", "autoygg", "action", obj.action)
	cursor:set("autoygg", "autoygg", "adddefaultgatewaycommand", obj.adddefaultgatewaycommand)
	cursor:set("autoygg", "autoygg", "addpeernullroutecommand", obj.addpeernullroutecommand)
	cursor:set("autoygg", "autoygg", "addpeerroutecommand", obj.addpeerroutecommand)
	cursor:set("autoygg", "autoygg", "addpeerroutelistcommand", obj.addpeerroutelistcommand)
	cursor:set("autoygg", "autoygg", "addtunnelroutecommand", obj.addtunnelroutecommand)
	cursor:set("autoygg", "autoygg", "daemon", to_int(obj.daemon))
	cursor:set("autoygg", "autoygg", "debug", to_int(obj.debug))
	cursor:set("autoygg", "autoygg", "defaultgatewaydev", obj.defaultgatewaydev)
	cursor:set("autoygg", "autoygg", "defaultgatewayip", obj.defaultgatewayip)
	cursor:set("autoygg", "autoygg", "deldefaultgatewaycommand", obj.deldefaultgatewaycommand)
	cursor:set("autoygg", "autoygg", "delpeernullroutecommand", obj.delpeernullroutecommand)
	cursor:set("autoygg", "autoygg", "delpeerroutecommand", obj.delpeerroutecommand)
	cursor:set("autoygg", "autoygg", "delpeerroutelistcommand", obj.delpeerroutelistcommand)
	cursor:set("autoygg", "autoygg", "deltunnelroutecommand", obj.deltunnelroutecommand)
	cursor:set("autoygg", "autoygg", "gatewayaddremotesubnetcommand", obj.gatewayaddremotesubnetcommand)
	cursor:set("autoygg", "autoygg", "gatewaydelremotesubnetcommand", obj.gatewaydelremotesubnetcommand)
	cursor:set("autoygg", "autoygg", "gatewayhost", obj.gatewayhost)
	cursor:set("autoygg", "autoygg", "gatewayport", obj.gatewayport)
	cursor:set("autoygg", "autoygg", "listtunnelroutecommand", obj.listtunnelroutecommand)
	cursor:set("autoygg", "autoygg", "quiet", to_int(obj.quiet))
	cursor:set("autoygg", "autoygg", "shell", obj.shell)
	cursor:set("autoygg", "autoygg", "shellcommandarg", obj.shellcommandarg)
	cursor:set("autoygg", "autoygg", "yggdrasilinterface", obj.yggdrasilinterface)
	return cursor:commit("autoygg")
end

function set_values(cursor, section_name, parameter, values)
	if values == nil then return false end

	for k, v in pairs(values) do
		local name = cursor:add("autoygg", section_name)
		cursor:set("autoygg", name, parameter, v)
	end
end

function to_int(bool) return bool and '1' or '0' end

function to_bool(int) return int ~= '0' end

function help()
	print("JSON interface to /etc/config/autoygg\n\nExamples: \
	autoygguci get > /tmp/etc/autoygg/client.yml \
	cat /tmp/etc/autoygg/client.yml | autoygguci set \
	uci changes \
	autoygguci get | autoygg-client -useconf")
end

-- main

if arg[1] == "get" then
	local json = dkjson.encode(UCI.get(), { indent = true })
	print(json)
elseif arg[1] == "set" then
	local json = io.stdin:read("*a")
	local obj, pos, err = dkjson.decode(json, 1, nil)

	if obj then
		UCI.set(obj)
	else
		print("dkjson: " .. err)
		os.exit(1)
	end
else
	help()
end
